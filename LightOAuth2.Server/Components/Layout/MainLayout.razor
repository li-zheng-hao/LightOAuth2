@using LightOAuth2.Server.Services
@using LightOAuth2.Server.State
@using LightOAuth2.Service.Services
@using System.ComponentModel
@inherits LayoutComponentBase
@implements IDisposable


<main>
    <PageHeader Title="@Title" Style="background:#F5F5F5;box-shadow: 0px 2px 2px rgba(0,0,0,0.2)">

        <PageHeaderExtra>
            <Button OnClick="GoHome">主页</Button>
            @if (userStateContainer.IsLogin == false)
            {
                <Button OnClick="Login">登录</Button>
            }
            else
            {
                <Button OnClick="LogOut">退出登录</Button>
            }
        </PageHeaderExtra>
    </PageHeader>
    @Body
</main>

@code {
    public string Title { get; set; } = "OAuth2统一登录中心";
    [Inject]
    NavigationManager navigationManager{get;set;}
    [Inject]
    AuthenticationService authenticationService{get;set;}
    [Inject]
    UserService userService { get; set; }
    [Inject]
    CookieSimulateService cookieSimulateService{ get; set; }
    [Inject]
    AuthorizeService authorizeService { get; set; }
    [Inject]
    public UserStateContainer userStateContainer{ get; set; }

    protected override void OnInitialized()
    {
        userStateContainer.PropertyChanged += PropertyChanged;

    }

    public void PropertyChanged(object? sender, PropertyChangedEventArgs e) => StateHasChanged();

    public void Dispose()
    {
        userStateContainer.PropertyChanged -= PropertyChanged;
    }
    protected override async Task OnInitializedAsync()
    {
        userStateContainer.PropertyChanged += PropertyChanged;
        if (await authorizeService.IsLoginAsync())
        {
            userStateContainer.IsLogin = true;
        }
        else
        {
            userStateContainer.IsLogin = false;
        }
    }
    protected override async System.Threading.Tasks.Task OnAfterRenderAsync(bool firstRender)
    {
        await cookieSimulateService.RefreshAsync("token",TimeSpan.FromDays(7));
    }

    void GoManagement()
    {
        navigationManager.NavigateTo("/manage");

    }
    private void GoHome()
    {
        navigationManager.NavigateTo("/");

    }
    private void Login()
    {
        userStateContainer.IsLogin = false;
        navigationManager.NavigateTo("/");
    }
    private async Task LogOut()
    {
       
        await authenticationService.SignOutAsync();
        userStateContainer.IsLogin = false;
        navigationManager.NavigateTo("/");
    }

   
}

